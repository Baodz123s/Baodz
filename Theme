--[[
    Fatality ThemeManager
    Compatible with Fatality UI Library
    
    Usage:
    local ThemeManager = loadstring(game:HttpGet("YOUR_GITHUB_RAW_URL"))()
    ThemeManager:SetLibrary(Fatality)
    ThemeManager:ApplyToTab(Menu["UI Settings"])
--]]

local cloneref = cloneref or function(instance) return instance end
local httpService = cloneref(game:GetService("HttpService"))
local httprequest = (syn and syn.request) or request or http_request or (http and http.request)

-- File system compatibility
local isfolder, isfile, listfiles, makefolder, writefile, readfile, delfile = 
    isfolder, isfile, listfiles, makefolder, writefile, readfile, delfile

if typeof(copyfunction) == "function" then
    local isfolder_copy, isfile_copy, listfiles_copy =
        copyfunction(isfolder), copyfunction(isfile), copyfunction(listfiles)

    local isfolder_success, isfolder_error = pcall(function()
        return isfolder_copy("test" .. tostring(math.random(1000000, 9999999)))
    end)

    if isfolder_success == false or typeof(isfolder_error) ~= "boolean" then
        isfolder = function(folder)
            local success, data = pcall(isfolder_copy, folder)
            return (success and data) or false
        end

        isfile = function(file)
            local success, data = pcall(isfile_copy, file)
            return (success and data) or false
        end

        listfiles = function(folder)
            local success, data = pcall(listfiles_copy, folder)
            return (success and data) or {}
        end
    end
end

local FatalityThemeManager = {}
do
    FatalityThemeManager.Folder = "FatalityThemes"
    FatalityThemeManager.Library = nil
    FatalityThemeManager.AppliedToTab = false
    
    -- Built-in themes compatible with Fatality color scheme
    FatalityThemeManager.BuiltInThemes = {
        ["Default"] = {
            1,
            {
                ["Main"] = "7d55ff",
                ["Black"] = "0f0f0f", 
                ["White"] = "ffffff",
                ["Dark"] = "191919",
                ["Red"] = "ff4757"
            }
        },
        ["Fatality Dark"] = {
            2,
            {
                ["Main"] = "c50754",
                ["Black"] = "191335",
                ["White"] = "ffffff", 
                ["Dark"] = "1e1842",
                ["Red"] = "ff4757"
            }
        },
        ["Cyber Blue"] = {
            3,
            {
                ["Main"] = "00d4ff",
                ["Black"] = "0a0a0a",
                ["White"] = "ffffff",
                ["Dark"] = "1a1a1a", 
                ["Red"] = "ff073a"
            }
        },
        ["Neon Green"] = {
            4,
            {
                ["Main"] = "39ff14",
                ["Black"] = "0d0d0d",
                ["White"] = "ffffff",
                ["Dark"] = "1d1d1d",
                ["Red"] = "ff1744"
            }
        },
        ["Purple Haze"] = {
            5,
            {
                ["Main"] = "9c27b0",
                ["Black"] = "1a0e2e",
                ["White"] = "ffffff",
                ["Dark"] = "2d1b3d",
                ["Red"] = "e91e63"
            }
        },
        ["Ocean"] = {
            6,
            {
                ["Main"] = "0077be",
                ["Black"] = "0f1419",
                ["White"] = "ffffff",
                ["Dark"] = "1e2328",
                ["Red"] = "f07178"
            }
        },
        ["Sunset"] = {
            7,
            {
                ["Main"] = "ff6b35",
                ["Black"] = "1a1a1a",
                ["White"] = "ffffff",
                ["Dark"] = "2d2d2d",
                ["Red"] = "ff4757"
            }
        },
        ["Mint"] = {
            8,
            {
                ["Main"] = "3db488",
                ["Black"] = "1c1c1c",
                ["White"] = "ffffff",
                ["Dark"] = "242424",
                ["Red"] = "e74c3c"
            }
        },
        ["Rose Gold"] = {
            9,
            {
                ["Main"] = "e91e63",
                ["Black"] = "1a1a1a",
                ["White"] = "ffffff",
                ["Dark"] = "2d2d2d",
                ["Red"] = "f44336"
            }
        },
        ["Matrix"] = {
            10,
            {
                ["Main"] = "00ff41",
                ["Black"] = "000000",
                ["White"] = "00ff41",
                ["Dark"] = "0d1b0d",
                ["Red"] = "ff0000"
            }
        }
    }

    function FatalityThemeManager:SetLibrary(library)
        self.Library = library
    end

    -- Folder management
    function FatalityThemeManager:GetPaths()
        local paths = {}
        local parts = self.Folder:split("/")
        
        for idx = 1, #parts do
            paths[#paths + 1] = table.concat(parts, "/", 1, idx)
        end
        
        paths[#paths + 1] = self.Folder .. "/themes"
        return paths
    end

    function FatalityThemeManager:BuildFolderTree()
        local paths = self:GetPaths()
        
        for i = 1, #paths do
            local str = paths[i]
            if not isfolder(str) then
                makefolder(str)
            end
        end
    end

    function FatalityThemeManager:CheckFolderTree()
        if not isfolder(self.Folder) then
            self:BuildFolderTree()
            task.wait(0.1)
        end
    end

    function FatalityThemeManager:SetFolder(folder)
        self.Folder = folder
        self:BuildFolderTree()
    end

    -- Theme application
    function FatalityThemeManager:ApplyTheme(theme)
        local customThemeData = self:GetCustomTheme(theme)
        local data = customThemeData or self.BuiltInThemes[theme]

        if not data then
            return
        end

        local scheme = data[2]
        
        -- Apply colors to Fatality library
        for colorName, hexValue in pairs(scheme) do
            if self.Library.Colors[colorName] then
                self.Library.Colors[colorName] = Color3.fromHex(hexValue)
            end
        end

        -- Update all UI elements
        self:ThemeUpdate()
        
        -- Notify user
        if self.Library.Notifier then
            self.Library.Notifier:Notify({
                Title = "Theme Manager",
                Content = "Applied theme: " .. theme,
                Icon = "palette",
                Duration = 3,
            })
        end
    end

    function FatalityThemeManager:ThemeUpdate()
        -- Update colors using Fatality's color system
        if self.Library.UpdateColorsUsingRegistry then
            self.Library:UpdateColorsUsingRegistry()
        elseif self.Library.UpdateColors then
            self.Library:UpdateColors()
        end
    end

    -- Custom theme management
    function FatalityThemeManager:GetCustomTheme(file)
        local path = self.Folder .. "/themes/" .. file .. ".json"
        if not isfile(path) then
            return nil
        end

        local data = readfile(path)
        local success, decoded = pcall(httpService.JSONDecode, httpService, data)

        if not success then
            return nil
        end

        return { 1, decoded }
    end

    function FatalityThemeManager:SaveCustomTheme(name)
        if name:gsub(" ", "") == "" then
            if self.Library.Notifier then
                self.Library.Notifier:Notify({
                    Title = "Theme Manager",
                    Content = "Invalid theme name (empty)",
                    Icon = "alert-circle",
                    Duration = 3,
                })
            end
            return
        end

        local theme = {}
        
        -- Get current colors from library
        for colorName, color in pairs(self.Library.Colors) do
            if typeof(color) == "Color3" then
                theme[colorName] = color:ToHex()
            end
        end

        local success, err = pcall(function()
            writefile(self.Folder .. "/themes/" .. name .. ".json", httpService:JSONEncode(theme))
        end)

        if success then
            if self.Library.Notifier then
                self.Library.Notifier:Notify({
                    Title = "Theme Manager",
                    Content = "Saved theme: " .. name,
                    Icon = "save",
                    Duration = 3,
                })
            end
        else
            if self.Library.Notifier then
                self.Library.Notifier:Notify({
                    Title = "Theme Manager",
                    Content = "Failed to save theme: " .. tostring(err),
                    Icon = "alert-circle",
                    Duration = 4,
                })
            end
        end
    end

    function FatalityThemeManager:DeleteTheme(name)
        if not name then
            return false, "No theme selected"
        end

        local file = self.Folder .. "/themes/" .. name .. ".json"
        if not isfile(file) then
            return false, "Theme file not found"
        end

        local success, err = pcall(delfile, file)
        if not success then
            return false, "Delete file error: " .. tostring(err)
        end

        return true
    end

    function FatalityThemeManager:LoadDefault()
        local theme = "Default"
        local defaultFile = self.Folder .. "/themes/default.txt"
        
        if isfile(defaultFile) then
            local content = readfile(defaultFile)
            if self.BuiltInThemes[content] or self:GetCustomTheme(content) then
                theme = content
            end
        end

        self:ApplyTheme(theme)
        return theme
    end

    function FatalityThemeManager:SaveDefault(theme)
        writefile(self.Folder .. "/themes/default.txt", theme)
    end

    function FatalityThemeManager:ReloadCustomThemes()
        local list = listfiles(self.Folder .. "/themes")
        local out = {}
        
        for i = 1, #list do
            local file = list[i]
            if file:sub(-5) == ".json" then
                local pos = file:find(".json", 1, true)
                local start = pos

                local char = file:sub(pos, pos)
                while char ~= "/" and char ~= "\\" and char ~= "" do
                    pos = pos - 1
                    char = file:sub(pos, pos)
                end

                if char == "/" or char == "\\" then
                    table.insert(out, file:sub(pos + 1, start - 1))
                end
            end
        end

        return out
    end

    -- UI Creation for Fatality
    function FatalityThemeManager:CreateThemeManager(section)
        -- Color pickers for each Fatality color
        local MainColorPicker = section:AddColorPicker({
            Name = "Main Color",
            Default = self.Library.Colors.Main,
            Flag = "ThemeManager_MainColor",
            Callback = function(color)
                self.Library.Colors.Main = color
                self:ThemeUpdate()
            end
        })

        local BlackColorPicker = section:AddColorPicker({
            Name = "Background Color", 
            Default = self.Library.Colors.Black,
            Flag = "ThemeManager_BlackColor",
            Callback = function(color)
                self.Library.Colors.Black = color
                self:ThemeUpdate()
            end
        })

        local WhiteColorPicker = section:AddColorPicker({
            Name = "Text Color",
            Default = self.Library.Colors.White,
            Flag = "ThemeManager_WhiteColor", 
            Callback = function(color)
                self.Library.Colors.White = color
                self:ThemeUpdate()
            end
        })

        local DarkColorPicker = section:AddColorPicker({
            Name = "Dark Color",
            Default = self.Library.Colors.Dark,
            Flag = "ThemeManager_DarkColor",
            Callback = function(color)
                self.Library.Colors.Dark = color
                self:ThemeUpdate()
            end
        })

        local RedColorPicker = section:AddColorPicker({
            Name = "Red Color",
            Default = self.Library.Colors.Red,
            Flag = "ThemeManager_RedColor",
            Callback = function(color)
                self.Library.Colors.Red = color
                self:ThemeUpdate()
            end
        })

        -- Built-in themes
        local ThemesArray = {}
        for name, theme in pairs(self.BuiltInThemes) do
            table.insert(ThemesArray, name)
        end

        table.sort(ThemesArray, function(a, b)
            return self.BuiltInThemes[a][1] < self.BuiltInThemes[b][1]
        end)

        local ThemeDropdown = section:AddDropdown({
            Name = "Built-in Themes",
            Options = ThemesArray,
            Default = "Default",
            Flag = "ThemeManager_BuiltinTheme",
            Callback = function(theme)
                self:ApplyTheme(theme)
            end
        })

        local SetDefaultButton = section:AddButton({
            Name = "Set as Default",
            Callback = function()
                local currentTheme = ThemeDropdown.Value
                self:SaveDefault(currentTheme)
                
                if self.Library.Notifier then
                    self.Library.Notifier:Notify({
                        Title = "Theme Manager",
                        Content = "Set default theme to: " .. currentTheme,
                        Icon = "check",
                        Duration = 3,
                    })
                end
            end
        })

        -- Custom themes
        local CustomThemeInput = section:AddTextbox({
            Name = "Custom Theme Name",
            Default = "",
            TextDisappear = true,
            Flag = "ThemeManager_CustomName",
            Callback = function() end
        })

        local SaveThemeButton = section:AddButton({
            Name = "Save Current Theme",
            Callback = function()
                local name = CustomThemeInput.Value
                if name and name ~= "" then
                    self:SaveCustomTheme(name)
                    CustomThemeDropdown:Refresh(self:ReloadCustomThemes())
                end
            end
        })

        local CustomThemeDropdown = section:AddDropdown({
            Name = "Custom Themes", 
            Options = self:ReloadCustomThemes(),
            Flag = "ThemeManager_CustomTheme",
            Callback = function(theme)
                if theme then
                    self:ApplyTheme(theme)
                end
            end
        })

        local LoadCustomButton = section:AddButton({
            Name = "Load Custom Theme",
            Callback = function()
                local theme = CustomThemeDropdown.Value
                if theme then
                    self:ApplyTheme(theme)
                end
            end
        })

        local OverwriteButton = section:AddButton({
            Name = "Overwrite Theme",
            Callback = function()
                local theme = CustomThemeDropdown.Value
                if theme then
                    self:SaveCustomTheme(theme)
                    
                    if self.Library.Notifier then
                        self.Library.Notifier:Notify({
                            Title = "Theme Manager",
                            Content = "Overwrote theme: " .. theme,
                            Icon = "edit",
                            Duration = 3,
                        })
                    end
                end
            end
        })

        local DeleteButton = section:AddButton({
            Name = "Delete Theme",
            Callback = function()
                local theme = CustomThemeDropdown.Value
                if theme then
                    local success, err = self:DeleteTheme(theme)
                    
                    if success then
                        CustomThemeDropdown:Refresh(self:ReloadCustomThemes())
                        
                        if self.Library.Notifier then
                            self.Library.Notifier:Notify({
                                Title = "Theme Manager",
                                Content = "Deleted theme: " .. theme,
                                Icon = "trash",
                                Duration = 3,
                            })
                        end
                    else
                        if self.Library.Notifier then
                            self.Library.Notifier:Notify({
                                Title = "Theme Manager",
                                Content = "Failed to delete: " .. err,
                                Icon = "alert-circle",
                                Duration = 4,
                            })
                        end
                    end
                end
            end
        })

        local RefreshButton = section:AddButton({
            Name = "Refresh List",
            Callback = function()
                CustomThemeDropdown:Refresh(self:ReloadCustomThemes())
                
                if self.Library.Notifier then
                    self.Library.Notifier:Notify({
                        Title = "Theme Manager",
                        Content = "Refreshed theme list",
                        Icon = "refresh-cw",
                        Duration = 2,
                    })
                end
            end
        })

        local ResetDefaultButton = section:AddButton({
            Name = "Reset Default",
            Callback = function()
                local defaultFile = self.Folder .. "/themes/default.txt"
                local success = pcall(delfile, defaultFile)
                
                if success then
                    if self.Library.Notifier then
                        self.Library.Notifier:Notify({
                            Title = "Theme Manager",
                            Content = "Reset default theme",
                            Icon = "rotate-ccw",
                            Duration = 3,
                        })
                    end
                else
                    if self.Library.Notifier then
                        self.Library.Notifier:Notify({
                            Title = "Theme Manager",
                            Content = "Failed to reset default",
                            Icon = "alert-circle",
                            Duration = 3,
                        })
                    end
                end
            end
        })

        -- Load default theme on initialization
        self:LoadDefault()
        self.AppliedToTab = true
    end

    function FatalityThemeManager:ApplyToTab(menu)
        assert(self.Library, "Must set FatalityThemeManager.Library first!")
        
        -- Create section in the provided menu
        local section = menu:AddSection({
            Name = "Theme Manager",
            Position = "left"
        })
        
        self:CreateThemeManager(section)
    end

    function FatalityThemeManager:ApplyToSection(section)
        assert(self.Library, "Must set FatalityThemeManager.Library first!")
        self:CreateThemeManager(section)
    end

    -- Initialize folder structure
    FatalityThemeManager:BuildFolderTree()
end

-- Export to global environment
getgenv().FatalityThemeManager = FatalityThemeManager
return FatalityThemeManager
